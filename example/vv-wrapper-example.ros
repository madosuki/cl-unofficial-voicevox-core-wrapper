#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:jonathan :cl-unofficial-voicevox-core-wrapper) :silent t)
  )

(defpackage :ros.script.vv-wrapper-example.3899604745
  (:use :cl :jonathan :cl-unofficial-voicevox-core-wrapper))
(in-package :ros.script.vv-wrapper-example.3899604745)

(defun write-wav-file (&key filepath wav-bytes wav-length)
  (with-open-file (stream filepath
                          :direction :output
                          :if-exists :supersede
                          :element-type 'unsigned-byte)
    (dotimes (n wav-length)
      (let ((byte (aref wav-bytes n)))
        (when byte
          (write-byte byte stream))))))

(defun parse-option (argv)
  (let ((tmp-text-option (cadr (member "--text" argv :test #'equal)))
        (tmp-lib-file-path-option (cadr (member "--lib-file-path" argv :test #'equal)))
        (tmp-open-jtalk-dict-dir-path-option (cadr (member "--open-jtalk-dir-path" argv :test #'equal)))
        (tmp-speaker-id-option (cadr (member "--speaker-id" argv :test #'equal))))
    (if (or (null tmp-text-option)
            (null tmp-lib-file-path-option)
            (null tmp-open-jtalk-dict-dir-path-option))
        nil
        (let ((speaker-id-integer (parse-integer tmp-speaker-id-option :junk-allowed t)))
          (if speaker-id-integer
              (list
               :text tmp-text-option
               :lib-file-path tmp-lib-file-path-option
               :open-jtalk-dict-dir-path tmp-open-jtalk-dict-dir-path-option
               :speaker-id speaker-id-integer)
              (list
               :text tmp-text-option
               :lib-file-path tmp-lib-file-path-option
               :open-jtalk-dict-dir-path tmp-open-jtalk-dict-dir-path-option))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((parsed (parse-option argv)))
    (unless parsed
      (format t "require --text and --lib-file-path , --open-jtalk-dir-path. --speaker-id is optionaly.~%")
      (return-from main nil))
    (let* ((text (cadr (member :text parsed)))
           (lib-file-path (cadr (member :lib-file-path parsed)))
           (open-jtalk-dict-dir-path (cadr (member :open-jtalk-dict-dir-path parsed)))
           (speaker-id (cadr (member :speaker-id parsed)))
           (library (cl-unofficial-voicevox-core-wrapper:load-library lib-file-path)))
      (unless speaker-id
        (setq speaker-id 0))
      (format t "version: ~A~%" (cl-unofficial-voicevox-core-wrapper:get-version))
      (print (cl-unofficial-voicevox-core-wrapper:initialize
              :acceleration-mode :voicevox-acceleration-mode-cpu
              :cpu-num-threads 0
              :load-all-models t
              :open-jtalk-dict-dir open-jtalk-dict-dir-path))
      (let ((audio-query-result (cl-unofficial-voicevox-core-wrapper:create-audio-query
                                 :text text
                                 :speaker-id speaker-id)))
        (if (equal (cadr (member :result-status audio-query-result)) :voicevox-result-ok)
            (let* ((audio-query (cadr (member :audio-query audio-query-result)))
                   (result (cl-unofficial-voicevox-core-wrapper:synthesis
                            :audio-query-json audio-query
                            :speaker-id speaker-id
                            :enable-interrogative-upspeak nil)))
              (if (equal (cadr (member :result-status result)) :voicevox-result-ok)
                  (write-wav-file
                   :filepath "a.wav"
                   :wav-length (cadr (member :wav-length result))
                   :wav-bytes (cadr (member :wav-bytes result)))
                  (print (cadr (member :result-status result)))))
            (print (cadr (member :result-status audio-query-result))))
        )
      (cl-unofficial-voicevox-core-wrapper:close-library library)))
  )
;;; vim: set ft=lisp lisp:
